// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyInspection.Infrastructure.Data;

#nullable disable

namespace MyInspection.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("MyInspection.Core.Entities.AQLDetails", b =>
                {
                    b.Property<int>("AQLDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AQLDetailID"));

                    b.Property<int>("AQLLevelID")
                        .HasColumnType("int");

                    b.Property<int>("AcceptanceMajor")
                        .HasColumnType("int");

                    b.Property<int>("AcceptanceMinor")
                        .HasColumnType("int");

                    b.Property<int>("LotSizeMax")
                        .HasColumnType("int");

                    b.Property<int>("LotSizeMin")
                        .HasColumnType("int");

                    b.Property<decimal>("MajorDefectLimit")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal>("MinorDefectLimit")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("RejectionMajor")
                        .HasColumnType("int");

                    b.Property<int>("RejectionMinor")
                        .HasColumnType("int");

                    b.Property<int>("SampleSize")
                        .HasColumnType("int");

                    b.HasKey("AQLDetailID");

                    b.HasIndex("AQLLevelID");

                    b.ToTable("AQLDetails");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.AQLLevel", b =>
                {
                    b.Property<int>("AQLLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AQLLevelID"));

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AQLLevelID");

                    b.ToTable("AQLLevels");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.AuditLog", b =>
                {
                    b.Property<long>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LogID"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LogID");

                    b.HasIndex("UserID");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.Checkpoint", b =>
                {
                    b.Property<int>("CheckpointID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckpointID"));

                    b.Property<int>("CriteriaID")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("MasterCriteriaCriteriaID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificationTolerance")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CheckpointID");

                    b.HasIndex("MasterCriteriaCriteriaID");

                    b.ToTable("Checkpoints");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerTypeID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("CustomerTypeID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerTypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerTypeID");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.InspectionReport", b =>
                {
                    b.Property<Guid>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("FactoryRepresentativeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InspectorId")
                        .HasColumnType("int");

                    b.Property<int?>("InspectorUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SBLOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("InspectorId");

                    b.ToTable("InspectionReports");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.MasterCriteria", b =>
                {
                    b.Property<int>("CriteriaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CriteriaID"));

                    b.Property<string>("CriteriaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("CriteriaID");

                    b.ToTable("MasterCriteria");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportCheckpointAnswer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerID"));

                    b.Property<string>("AnswerValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CheckpointID")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InspectionReportReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QuantitySampled")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnswerID");

                    b.HasIndex("CheckpointID");

                    b.HasIndex("InspectionReportReportID");

                    b.ToTable("ReportCheckpointAnswers");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportCriteriaStatus", b =>
                {
                    b.Property<int>("ReportCriteriaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportCriteriaID"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriteriaID")
                        .HasColumnType("int");

                    b.Property<Guid>("InspectionReportReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MasterCriteriaCriteriaID")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportCriteriaID");

                    b.HasIndex("InspectionReportReportID");

                    b.HasIndex("MasterCriteriaCriteriaID");

                    b.ToTable("ReportCriteriaStatuses");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportDefect", b =>
                {
                    b.Property<int>("DefectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefectID"));

                    b.Property<int>("CriticalCount")
                        .HasColumnType("int");

                    b.Property<string>("DefectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InspectionReportReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MajorCount")
                        .HasColumnType("int");

                    b.Property<int>("MinorCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DefectID");

                    b.HasIndex("InspectionReportReportID");

                    b.ToTable("ReportDefects");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportDetails", b =>
                {
                    b.Property<int>("ReportDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportDetailID"));

                    b.Property<string>("InspectionLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LCNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StyleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("ReportDetailID");

                    b.HasIndex("ReportID")
                        .IsUnique();

                    b.ToTable("ReportDetails");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportMedia", b =>
                {
                    b.Property<int>("MediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaID"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InspectionReportReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("S3BucketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("S3ObjectKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MediaID");

                    b.HasIndex("InspectionReportReportID");

                    b.ToTable("ReportMediaFiles");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportOverride", b =>
                {
                    b.Property<int>("OverrideID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OverrideID"));

                    b.Property<Guid>("InspectionReportReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OverriddenByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OverrideTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OverrideID");

                    b.HasIndex("InspectionReportReportID");

                    b.HasIndex("OverriddenByUserID");

                    b.ToTable("ReportOverrides");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportQuantityItem", b =>
                {
                    b.Property<int>("ReportQuantityItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportQuantityItemID"));

                    b.Property<int>("CartonsNotPacked")
                        .HasColumnType("int");

                    b.Property<int>("CartonsPacked")
                        .HasColumnType("int");

                    b.Property<int>("InspectedQtyNotPacked")
                        .HasColumnType("int");

                    b.Property<int>("InspectedQtyPacked")
                        .HasColumnType("int");

                    b.Property<Guid>("InspectionReportReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("PONumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StyleArticle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportQuantityItemID");

                    b.HasIndex("InspectionReportReportID");

                    b.ToTable("ReportQuantityItems");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("MyInspection.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyInspection.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyInspection.Core.Entities.AQLDetails", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.AQLLevel", "AQLLevel")
                        .WithMany()
                        .HasForeignKey("AQLLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AQLLevel");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.AuditLog", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.Checkpoint", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.MasterCriteria", "MasterCriteria")
                        .WithMany()
                        .HasForeignKey("MasterCriteriaCriteriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterCriteria");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.Customer", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeID");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.InspectionReport", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("MyInspection.Core.Entities.User", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.Navigation("Customer");

                    b.Navigation("Inspector");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportCheckpointAnswer", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.Checkpoint", "Checkpoint")
                        .WithMany()
                        .HasForeignKey("CheckpointID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyInspection.Core.Entities.InspectionReport", "InspectionReport")
                        .WithMany()
                        .HasForeignKey("InspectionReportReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checkpoint");

                    b.Navigation("InspectionReport");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportCriteriaStatus", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.InspectionReport", "InspectionReport")
                        .WithMany("CriteriaStatuses")
                        .HasForeignKey("InspectionReportReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyInspection.Core.Entities.MasterCriteria", "MasterCriteria")
                        .WithMany()
                        .HasForeignKey("MasterCriteriaCriteriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionReport");

                    b.Navigation("MasterCriteria");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportDefect", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.InspectionReport", "InspectionReport")
                        .WithMany("Defects")
                        .HasForeignKey("InspectionReportReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionReport");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportDetails", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.InspectionReport", "InspectionReport")
                        .WithOne("ReportDetails")
                        .HasForeignKey("MyInspection.Core.Entities.ReportDetails", "ReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionReport");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportMedia", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.InspectionReport", "InspectionReport")
                        .WithMany("MediaFiles")
                        .HasForeignKey("InspectionReportReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionReport");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportOverride", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.InspectionReport", "InspectionReport")
                        .WithMany()
                        .HasForeignKey("InspectionReportReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyInspection.Core.Entities.User", "OverriddenByUser")
                        .WithMany()
                        .HasForeignKey("OverriddenByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionReport");

                    b.Navigation("OverriddenByUser");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.ReportQuantityItem", b =>
                {
                    b.HasOne("MyInspection.Core.Entities.InspectionReport", "InspectionReport")
                        .WithMany("QuantityItems")
                        .HasForeignKey("InspectionReportReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionReport");
                });

            modelBuilder.Entity("MyInspection.Core.Entities.InspectionReport", b =>
                {
                    b.Navigation("CriteriaStatuses");

                    b.Navigation("Defects");

                    b.Navigation("MediaFiles");

                    b.Navigation("QuantityItems");

                    b.Navigation("ReportDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
